import pandas as pd 

## ----- NWS_DAG UTILS ----- ## 

def get_nws_url(row:pd.Series) -> str:
  """
  Construct NWS forecast url from latitude and longitude columns in locations dataframe
  
  Args: 
  row (pd.Series): The current row of the dataframe

  Returns: 
  url (str): The url for the NWS 48 hour forecast for the given coordinates 
  """
  url = f"https://forecast.weather.gov/MapClick.php?lat={row['latitude']}&lon={row['longitude']}&unit=0&lg=english&FcstType=digital&menu=1"
  return url

def _ff_list(ls:list) -> list:
  """
  Forward fill the values in the list associated with "data_map['Date']" in get_dict() 
  
  Args: 
  ls (list): The list of dates associated with the 'Date' key in the data_map dictionary

  Returns: 
  ls (list): The same list but with its values forward-filled  
  """
  for i in range(len(ls)):
    if not ls[i] and i > 0:
        ls[i] = ls[i-1]
  return ls

def extract_table_data(tr_list:list, location:str) -> list:
  """
  Extracts data from a list of <tr> elements and returns a table (as a list of lists)  
  
  Args: 
  tr_list (list): List of <tr> elements containing NWS forecast data

  location (str): The name of the place the forecast is for; used for filling out added "location" column 

  Returns:
  table (list): List of lists containing
  
  """
  colspan = tr_list[0] # tables are stacked vertically and divided by two colspan elements
  table = [tr for  tr in tr_list if tr != colspan] # vertically concat tables by removing colspan elements

  table = [[ele.getText() for ele in tr.find_all("font")] for tr in table] 
  location_col = ['location'] # name of location column 
  location_col.extend([location]*24) # fill out to match length of other columns
  table.insert(1, location_col)  # for first half of table
  table.insert(19, location_col) # for second half of table
  return table

def transpose_as_dict(table:list) -> dict:
  """
  Takes the list of lists generated by extract_table_data() and returns a dictionary
  
  Args:
  table (list): list of lists of columnar data generated by extract_table_data()

  Returns: 
  data_map (dict): Dictionary representation of table, transposed and ready to be made into a dataframe
  
  """
  data_map = {}
  for col in table: # Table is still "landscape-oriented"
    if col[0] not in data_map.keys(): # cols from first half of table
      data_map[col[0]] = col[1:]
    else: # cols from second half
      data_map[col[0]].extend(col[1:])
  data_map['Date'] = _ff_list(data_map['Date'])
  return data_map
